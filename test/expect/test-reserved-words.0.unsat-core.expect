(set-option :produce-unsat-cores true)
(set-logic ALL)
(declare-fun |BINARY| () Bool)
(declare-fun |DECIMAL| () Bool)
(declare-fun |HEXADECIMAL| () Bool)
(declare-fun |NUMERAL| () Bool)
(declare-fun |_| () Bool)
(declare-fun |!| () Bool)
(declare-fun |as| () Bool)
(declare-fun |let| () Bool)
(declare-fun |exists| () Bool)
(declare-fun |forall| () Bool)
(declare-fun |match| () Bool)
(declare-fun |par| () Bool)
(declare-fun |assert| () Bool)
(declare-fun |check-sat| () Bool)
(declare-fun || () Bool)
(assert (! |BINARY| :named a1))
(assert (! |DECIMAL| :named a2))
(assert (! |HEXADECIMAL| :named a3))
(assert (! |NUMERAL| :named a4))
(assert (! |_| :named a5))
(assert (! |!| :named a6))
(assert (! |as| :named a7))
(assert (! |let| :named a8))
(assert (! |exists| :named a9))
(assert (! |forall| :named a10))
(assert (! |match| :named a11))
(assert (! |par| :named a12))
(assert (! (let ((|let| |let|)) |let|) :named a13))
(assert (! (exists ((|exists| Bool)) |exists|) :named a14))
(assert (! (forall ((|forall| Bool)) (or |forall| (not |forall|))) :named a15))
(assert (! |assert| :named a16))
(assert (! |check-sat| :named a17))
(assert (! || :named a18))
(check-sat)
(get-unsat-core)
(exit)
