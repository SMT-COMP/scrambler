(set-option :produce-unsat-cores true)
(set-logic AUFBVDTNIRA)
(assert (! true :named a1))
(check-sat)
(get-unsat-core)
(declare-fun x9 () Bool)
(declare-datatypes ((x5 0)) (((x27))))
(declare-datatypes ((x6 0)) (((x16))))
(declare-fun x14 () Bool)
(declare-fun x30 (Int) Bool)
(declare-sort x24 0)
(define-fun x4 () Bool true)
(define-fun x18 ((x26 x24)) Bool true)
(define-sort x2 () Bool)
(push 1)
(pop 1)
(assert (! (exists ((x26 Bool)) x26) :named a2))
(assert (! (= 1234.5 1234.5) :named a3))
(assert (! (match x27 ((x27 true))) :named a4))
(assert (! (= #x0123456789aBcDeF #x0123456789aBcDeF) :named a5))
(assert (! (x30 0) :named a6))
(assert (! (forall ((x26 Bool)) (or x26 (not x26))) :named a7))
(assert (! (= 1234 1234) :named a8))
(assert (! (= #b01 #b01) :named a9))
(assert (! (= "a string" "a string") :named a10))
(assert (! (! x9 :named symbol) :named a11))
(assert (! (as x9 Bool) :named a12))
(assert (! x9 :named a13))
(assert (! (let ((x26 true)) x26) :named a14))
(declare-datatypes ((x7 0)) (((x31) (x8) (x28))))
(declare-datatypes ((x15 0)) (((x17 (x12 Int) (x22 x15)) (x3))))
(declare-datatypes ((x21 0) (x20 0)) (((x13 (x1 Int) (x23 x20))) ((x11 (x29 x21) (x25 x20)) (x32))))
(assert (! x9 :named a15))
(assert (! (match (x17 1234 x3) ((x3 false) ((x17 x26 x19) true) (x10 false))) :named a16))
(assert (! (! x9 :named symbol) :named a17))
(assert (! (forall ((x26 Bool)) true) :named a18))
(assert (! (forall ((x26 (Array Int Real))) true) :named a19))
(assert (! ((_ is x17) (x17 1234 x3)) :named a20))
(assert (! x9 :named a21))
(assert (! x9 :named a22))
(assert (! (_ foo bar) :named a23))
(assert (! (! x9 :pattern (x9)) :named a24))
(assert (! ((_ is x3) (x22 (x17 1234 x3))) :named a25))
(assert (! ((_ is x8) x8) :named a26))
(assert (! (_ foo 0) :named a27))
(exit)
