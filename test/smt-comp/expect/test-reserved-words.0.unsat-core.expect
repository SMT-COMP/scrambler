(set-option :print-success false)
(set-option :produce-unsat-cores true)
(set-logic ALL)
(declare-fun |BINARY| () Bool)
(declare-fun |DECIMAL| () Bool)
(declare-fun |HEXADECIMAL| () Bool)
(declare-fun |NUMERAL| () Bool)
(declare-fun |_| () Bool)
(declare-fun |!| () Bool)
(declare-fun |as| () Bool)
(declare-fun |let| () Bool)
(declare-fun |exists| () Bool)
(declare-fun |forall| () Bool)
(declare-fun |match| () Bool)
(declare-fun |par| () Bool)
(declare-fun |assert| () Bool)
(declare-fun |check-sat| () Bool)
(declare-fun || () Bool)
(assert (! |BINARY| :named smtcomp1))
(assert (! |DECIMAL| :named smtcomp2))
(assert (! |HEXADECIMAL| :named smtcomp3))
(assert (! |NUMERAL| :named smtcomp4))
(assert (! |_| :named smtcomp5))
(assert (! |!| :named smtcomp6))
(assert (! |as| :named smtcomp7))
(assert (! |let| :named smtcomp8))
(assert (! |exists| :named smtcomp9))
(assert (! |forall| :named smtcomp10))
(assert (! |match| :named smtcomp11))
(assert (! |par| :named smtcomp12))
(assert (! (let ((|let| |let|)) |let|) :named smtcomp13))
(assert (! (exists ((|exists| Bool)) |exists|) :named smtcomp14))
(assert (! (forall ((|forall| Bool)) (or |forall| (not |forall|))) :named smtcomp15))
(assert (! |assert| :named smtcomp16))
(assert (! |check-sat| :named smtcomp17))
(assert (! || :named smtcomp18))
(check-sat)
(get-unsat-core)
(exit)
