(set-option :print-success false)
(set-option :produce-unsat-cores true)
(set-logic AUFBVDTNIRA)
(assert (! true :named smtcomp1))
(check-sat)
(get-unsat-core)
(declare-fun c () Bool)
(declare-datatypes ((Unit 0)) (((unit))))
(declare-datatypes ((AnotherUnit 0)) (((anotherunit))))
(declare-fun f () Bool)
(declare-fun g (Int) Bool)
(declare-sort s 0)
(define-fun h () Bool true)
(define-fun i ((x s)) Bool true)
(define-sort t () Bool)
(push 1)
(pop 1)
(assert (! (= 1234 1234) :named smtcomp2))
(assert (! (= 1234.5 1234.5) :named smtcomp3))
(assert (! (= #x0123456789aBcDeF #x0123456789aBcDeF) :named smtcomp4))
(assert (! (= #b01 #b01) :named smtcomp5))
(assert (! (= "a string" "a string") :named smtcomp6))
(assert (! c :named smtcomp7))
(assert (! (as c Bool) :named smtcomp8))
(assert (! (g 0) :named smtcomp9))
(assert (! (let ((x true)) x) :named smtcomp10))
(assert (! (forall ((x Bool)) (or x (not x))) :named smtcomp11))
(assert (! (exists ((x Bool)) x) :named smtcomp12))
(assert (! (match unit ((unit true))) :named smtcomp13))
(assert (! c :named smtcomp14))
(declare-datatypes ((Color 0)) (((red) (green) (blue))))
(declare-datatypes ((IntList 0)) (((empty) (insert (head Int) (tail IntList)))))
(declare-datatypes ((IntTree 0) (IntTreeList 0)) (((node (value Int) (children IntTreeList))) ((inttl_empty) (inttl_insert (inttl_head IntTree) (inttl_tail IntTreeList)))))
(assert (! ((_ is red) red) :named smtcomp15))
(assert (! ((_ is insert) (insert 1234 empty)) :named smtcomp16))
(assert (! ((_ is empty) (tail (insert 1234 empty))) :named smtcomp17))
(assert (! (match (insert 1234 empty) ((empty false) ((insert x y) true) (z false))) :named smtcomp18))
(assert (! (forall ((x Bool)) true) :named smtcomp19))
(assert (! (forall ((x (Array Int Real))) true) :named smtcomp20))
(assert (! c :named smtcomp21))
(assert (! (! c :pattern (c)) :named smtcomp22))
(assert (! c :named smtcomp23))
(assert (! (_ foo 0) :named smtcomp24))
(assert (! (_ foo bar) :named smtcomp25))
(assert (! c :named smtcomp26))
(assert (! |c| :named smtcomp27))
(exit)
