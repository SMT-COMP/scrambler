(set-option :print-success false)
(set-logic AUFBVDTNIRA)
(assert true)
(check-sat)
(declare-fun c () Bool)
(declare-datatypes ((Unit 0)) (((unit))))
(declare-datatypes ((AnotherUnit 0)) (((anotherunit))))
(declare-fun f () Bool)
(declare-fun g (Int) Bool)
(declare-sort s 0)
(define-fun h () Bool true)
(define-fun i ((x s)) Bool true)
(define-sort t () Bool)
(push 1)
(pop 1)
(assert (= 1234 1234))
(assert (= 1234.5 1234.5))
(assert (= #x0123456789aBcDeF #x0123456789aBcDeF))
(assert (= #b01 #b01))
(assert (= "a string" "a string"))
(assert c)
(assert (as c Bool))
(assert (g 0))
(assert (let ((x true)) x))
(assert (forall ((x Bool)) (or x (not x))))
(assert (exists ((x Bool)) x))
(assert (match unit ((unit true))))
(assert (! c :named symbol))
(declare-datatypes ((Color 0)) (((red) (green) (blue))))
(declare-datatypes ((IntList 0)) (((empty) (insert (head Int) (tail IntList)))))
(declare-datatypes ((IntTree 0) (IntTreeList 0)) (((node (value Int) (children IntTreeList))) ((inttl_empty) (inttl_insert (inttl_head IntTree) (inttl_tail IntTreeList)))))
(assert ((_ is red) red))
(assert ((_ is insert) (insert 1234 empty)))
(assert ((_ is empty) (tail (insert 1234 empty))))
(assert (match (insert 1234 empty) ((empty false) ((insert x y) true) (z false))))
(assert (forall ((x Bool)) true))
(assert (forall ((x (Array Int Real))) true))
(assert (! c :named symbol))
(assert (! c :pattern (c)))
(assert c)
(assert (_ foo 0))
(assert (_ foo bar))
(assert c)
(assert |c|)
(exit)
